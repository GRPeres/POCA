@page "/teste-home"
@inject UserSessionService UserSession
@inject NavigationManager NavigationManager
@inject Services.APIs.AlunosAPI AlunosAPI;

<PageTitle>Home</PageTitle>

<MudText>@Erro</MudText>

@if (UserSession.IsLoggedIn)
{
    @if (UserSession.CurrentUser.IsProfessor)
    {
        <MudText>Você já está logado como professor</MudText>
    }
    else
    {
        <MudNavMenu>
            <MudText>Quadro de Avisos</MudText>
            <MudButton OnClick="AvisoVoltar">Voltar</MudButton>
            <MudButton OnClick="AvisoProximo">Proximo</MudButton>
        </MudNavMenu>

        <MudText>@Avisos[posicao]</MudText>


        if (!_isLoading)
        {
            @foreach (var materia in TodasMaterias)
            {
                <MudText>@materia</MudText>
            }
        }else
        {
            <MudProgressCircular Indeterminate="true" size="Size.Small" Color="Color.Inherit"></MudProgressCircular>
        }
    }
}
else
{
    <MudText>Você já não está logado</MudText>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mt-4" Href="/login">Logar</MudButton>
}

@code
{
    public List<string> Avisos = new() { "Aviso 1", "Aviso 2", "Aviso 3", "Aviso 4" };
    public string Erro = "";
    public int posicao;
    public int Progresso;
    public bool _isLoading = true;

    public List<MateriaResponse> TodasMaterias = new();

    protected override async Task OnInitializedAsync()
    {
        UserSession.OnChange += HandleUserSessionChanged;

        if (UserSession.IsLoggedIn)
        {
            await GetMaterias();
        }
    }

    private void HandleUserSessionChanged()
    {
        InvokeAsync(StateHasChanged);
    }   

    public void Dispose()
    {
        UserSession.OnChange -= HandleUserSessionChanged;
    }

    // Começo
    public void AvisoProximo()
    {
        if (posicao < Avisos.Count - 1)
        {
            posicao++;
        }else
        {
            posicao = 0;
        }
    }

    public void AvisoVoltar()
    {
        if (posicao > 0)
        {
            posicao--;
        }
        else
        {
            posicao = Avisos.Count - 1;
        }
    }

    public async Task GetMaterias()
    {
        try
        {
            if (UserSession.CurrentUser == null)
            {
                Console.WriteLine("Current user is null. Cannot retrieve subjects.");
                return;
            }

            _isLoading = true;
            Console.WriteLine("Loading subjects...");

            if (!UserSession.CurrentUser.IdAluno.HasValue)
            {
                Console.WriteLine("User ID is missing. Cannot retrieve subjects.");
                _isLoading = false;
                return;
            }

            var materiasFromApi = await AlunosAPI.GetMateriasByAlunoAsync(UserSession.CurrentUser.IdAluno.Value);

            if (materiasFromApi != null)
            {
                TodasMaterias.Clear();

                foreach (var materia in materiasFromApi)
                {
                    TodasMaterias.Add(materia);
                    Console.WriteLine($"Subject retrieved: {materia.IdMateria}");
                }
                Console.WriteLine($"Successfully loaded {TodasMaterias.Count} subjects.");
            }
            else
            {
                Console.WriteLine("No subjects found for the current user.");
            }
        }
        catch (HttpRequestException httpEx)
        {
            Erro = $"Network error: {httpEx.Message}. Please check your internet connection.";
            Console.WriteLine($"Caught HTTP exception: {httpEx}");
        }
        catch (Exception ex)
        {
            Erro = $"An unexpected error occurred: {ex.Message}";
            Console.WriteLine($"Caught general exception: {ex}");
        }
        finally
        {
            _isLoading = false;
            Console.WriteLine("_isLoading set to false.");
            await InvokeAsync(StateHasChanged);
        }
    }
}