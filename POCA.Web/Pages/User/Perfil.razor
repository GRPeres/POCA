@page "/perfil"
@using MudBlazor
@using POCA.Web
@inject PessoasAPI PessoasAPI
@inject POCA.Web.Services.APIs.AlunosAPI AlunosAPI
@inject POCA.Web.Services.APIs.ProfessoresAPI ProfessoresAPI
@inject UserSessionService UserSession
@inject NavigationManager NavigationManager

<MudPaper Elevation="4" Class="pa-4 ma-2 rounded">
    <MudText>@Erro</MudText>
    @if (paginicial)
    {
        <MudStack Spacing="2">
            @if (UserSession.CurrentUser != null && UserSession.CurrentUser.IdProfessor.HasValue)
            {
                <MudText Typo="Typo.h6" Color="Color.Primary">Informações do Professor</MudText>
                <MudDivider />
                <MudText><b>Nome:</b> @Professor.NomeProfessor</MudText>
                <MudText><b>Contato:</b> @Professor.ContatoProfessor</MudText>
            }
            else
            {
                <MudText Typo="Typo.h6" Color="Color.Primary">Informações do Aluno</MudText>
                <MudDivider />
                <MudText><b>Nome:</b> @Aluno.NomeAluno</MudText>
                <MudText><b>Contato:</b> @Aluno.ContatoAluno</MudText>
                <MudText><b>Idade:</b> @Aluno.IdadeAluno</MudText>
            }
        </MudStack>
    }
    else
    {
        <MudText>IsLoggedIn: @UserSession.IsLoggedIn</MudText>
        <MudProgressCircular Indeterminate="true" Size="Size.Large" Color="Color.Primary" />
        <MudText>Professor: @Professor.NomeProfessor</MudText>
        <MudText>Aluno: @Aluno.NomeAluno</MudText>
        <MudText>Page loaded: @paginicial</MudText>

    }
</MudPaper>

@code
{
    public string Erro = "";

    public bool paginicial = false;
    public ProfessorResponse Professor { get; set; } = new ProfessorResponse(0, "", "", "");
    public AlunoResponse Aluno { get; set; } = new AlunoResponse(0, "", 0, 0, "", null, null);

    protected override async Task OnInitializedAsync()
    {
        UserSession.OnChange += HandleUserSessionChanged;

        if (UserSession.IsLoggedIn)
        {
            await LoadUserDataAsync();
        }
    }

    private async void HandleUserSessionChanged()
    {
        if (UserSession.IsLoggedIn)
        {
            await LoadUserDataAsync();
        }
        else
        {
            paginicial = false;
            Erro = "Usuário não está logado.";
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task LoadUserDataAsync()
    {
        try
        {
            if (UserSession.CurrentUser == null)
            {
                Console.WriteLine("UserSession.CurrentUser is null");
                Erro = "Usuário não encontrado.";
                return;
            }

            if (UserSession.CurrentUser.IdProfessor.HasValue)
            {
                Professor = await ProfessoresAPI.GetProfessorbyidAsync(UserSession.CurrentUser.IdProfessor.Value);
            }
            else
            {
                Aluno = await AlunosAPI.GetAlunosbyIDAsync(UserSession.CurrentUser.IdAluno.Value);
            }


            paginicial = true;
            Console.WriteLine("paginicial set to true");
        }
        catch (Exception ex)
        {
            Erro = $"Erro: {ex.Message}";
            Console.WriteLine($"Caught exception: {ex}");
        }

        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        UserSession.OnChange -= HandleUserSessionChanged;
    }
}