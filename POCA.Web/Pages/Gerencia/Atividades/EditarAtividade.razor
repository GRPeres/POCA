@page "/editar-atividade/{id:int}"
@using POCA.API.Requests.Atividade
@using POCA.Web.Services.APIs
@inject AtividadesAPI AtividadesAPI
@inject QuestoesAPI QuestoesAPI
@inject NavigationManager NavManager
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.Large" Class="py-6">
    @if (_currentStep == 1)
    {
        <!-- STEP 1: Basic Activity Info -->
        <MudPaper Elevation="4" Class="pa-6 rounded-lg">
            <div class="d-flex align-center mb-4">
                <MudIconButton Icon="@Icons.Material.Filled.ArrowBack"
                               Color="Color.Primary"
                               Variant="Variant.Text"
                               Href="/atividades"
                               Class="mr-2" />
                <MudText Typo="Typo.h4">Editar Atividade</MudText>
            </div>
            <MudStepper @bind-ActiveStep="_currentStep" Elevation="0">
                <!-- STEP 1 -->
                <MudStep Label="Informações Básicas" Completed="_currentStep > 0">
                    <MudStepContent>
                        @Step1Content

                        <div class="d-flex justify-end mt-4">
                            <MudButton Variant="Variant.Filled"
                                       Color="Color.Primary"
                                       OnClick="ProceedToStep2"
                                       Disabled="@(!_isValidStep1)">
                                Próximo
                            </MudButton>
                        </div>
                    </MudStepContent>
                </MudStep>

                <!-- STEP 2 -->
                <MudStep Label="Selecionar Questões" Completed="_currentStep == 1">
                    <MudStepContent>
                        @Step2Content

                        <div class="d-flex justify-space-between mt-4">
                            <MudButton Variant="Variant.Text"
                                       Color="Color.Primary"
                                       OnClick="BackToStep1">
                                Voltar
                            </MudButton>

                            <MudButton Variant="Variant.Filled"
                                       Color="Color.Primary"
                                       OnClick="HandleSubmit"
                                       Disabled="@(_isSubmitting)">
                                Salvar Alterações
                            </MudButton>
                        </div>
                    </MudStepContent>
                </MudStep>
            </MudStepper>

            <MudDivider Class="my-4" />

            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       FullWidth="true"
                       Disabled="@(!CanSubmit)"
                       OnClick="HandleStepAction"
                       StartIcon="@Icons.Material.Filled.Save">
                Salvar
            </MudButton>
        </MudPaper>
    }
    else if (_currentStep == 2)
    {
        <!-- STEP 2: Select Questions -->
        <MudPaper Elevation="4" Class="pa-6 rounded-lg">
            <div class="d-flex align-center mb-4">
                <MudIconButton Icon="@Icons.Material.Filled.ArrowBack"
                               Color="Color.Primary"
                               Variant="Variant.Text"
                               OnClick="BackToStep1"
                               Class="mr-2" />
                <MudText Typo="Typo.h4">Editar Questões para: @_atividadeModel.NomeAtividade</MudText>
            </div>

            <MudStepper @bind-ActiveStep="_currentStep" Elevation="0" Editable="true">
                <MudStep Completed="_currentStep > 1" Label="Informações Básicas" />
                <MudStep Completed="_currentStep == 2" Label="Selecionar Questões" />
            </MudStepper>

            <!-- Filter Options -->
            <MudPaper Class="pa-4 mb-4 mt-4" Elevation="1">
                <div class="d-flex align-center">
                    <MudTextField @bind-Value="_searchString"
                                  Placeholder="Pesquisar questões..."
                                  Variant="Variant.Outlined"
                                  AdornmentIcon="@Icons.Material.Filled.Search"
                                  Adornment="Adornment.Start"
                                  Immediate="true"
                                  Class="mr-4"
                                  Style="flex-grow: 1;" />

                    <MudSelect @bind-Value="_selectedDifficulty"
                               Label="Dificuldade"
                               Variant="Variant.Outlined"
                               AnchorOrigin="Origin.BottomRight"
                               Class="mr-4"
                               Style="min-width: 150px;">
                        <MudSelectItem Value="@("")">Todas</MudSelectItem>
                        <MudSelectItem Value="@("Fácil")">Fácil</MudSelectItem>
                        <MudSelectItem Value="@("Médio")">Médio</MudSelectItem>
                        <MudSelectItem Value="@("Difícil")">Difícil</MudSelectItem>
                    </MudSelect>

                    <MudSelect @bind-Value="_selectedTopic"
                               Label="Tema"
                               Variant="Variant.Outlined"
                               AnchorOrigin="Origin.BottomRight"
                               Style="min-width: 150px;">
                        <MudSelectItem Value="@("")">Todos</MudSelectItem>
                        @foreach (var topic in _uniqueTopics)
                        {
                            <MudSelectItem Value="@topic">@topic</MudSelectItem>
                        }
                    </MudSelect>
                </div>
            </MudPaper>

            <!-- Questions Table with Selection -->
            <MudPaper Elevation="2" Class="overflow-hidden">
                <MudTable Items="@FilteredQuestions"
                          Dense="true"
                          Hover="true"
                          Striped="false"
                          Bordered="true"
                          Loading="@_isLoading">
                    <HeaderContent>
                        <MudTh>Selecionar</MudTh>
                        <MudTh>Enunciado</MudTh>
                        <MudTh>Tema</MudTh>
                        <MudTh>Dificuldade</MudTh>
                    </HeaderContent>

                    <RowTemplate Context="questao">
                        <MudTd>
                            <MudCheckBox T="bool"
                                 @bind-Value="IsSelected[questao.IdQuestao]"
                                 Disabled="@(_isSubmitting)"/>
                        </MudTd>
                        <MudTd Style="max-width: 400px; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">
                            @questao.EnunciadoQuestao
                        </MudTd>
                        <MudTd>@questao.TemaQuestao</MudTd>
                        <MudTd>
                            <MudChip T="string"
                                     Text="@questao.DificuldadeQuestao"
                                     Color="@GetDifficultyColor(questao.DificuldadeQuestao)"
                                     Size="Size.Small" />
                        </MudTd>
                    </RowTemplate>

                    <PagerContent>
                        <MudTablePager PageSizeOptions="@(new[] {10, 25, 50})" />
                    </PagerContent>
                </MudTable>
            </MudPaper>

            <!-- Selected Questions Summary -->
            <MudPaper Elevation="1" Class="pa-4 mt-4 rounded-lg" Style="border-left: 4px solid var(--mud-palette-primary);">
                <div class="d-flex align-center justify-space-between">
                    <MudText Typo="Typo.subtitle1">
                        Questões Selecionadas: @SelectedQuestionsCount
                    </MudText>
                    <MudButton Variant="Variant.Text"
                               Color="Color.Error"
                               Size="Size.Small"
                               StartIcon="@Icons.Material.Filled.Clear"
                               OnClick="ClearSelection"
                               Disabled="@(SelectedQuestionsCount == 0 || _isSubmitting)">
                        Limpar Seleção
                    </MudButton>
                </div>
            </MudPaper>

            <!-- Action Buttons -->
            <div class="d-flex justify-space-between mt-6">
                <MudButton Variant="Variant.Text"
                           Color="Color.Primary"
                           StartIcon="@Icons.Material.Filled.ArrowBack"
                           OnClick="BackToStep1"
                           Disabled="@(_isSubmitting)">
                    Voltar
                </MudButton>
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           EndIcon="@Icons.Material.Filled.Save"
                           OnClick="HandleSubmit"
                           Disabled="@(_isSubmitting)"
                           Class="ml-auto">
                    @(_isSubmitting ? "Salvando..." : "Salvar Alterações")
                </MudButton>
            </div>
        </MudPaper>
    }
</MudContainer>

@code {
    [Parameter]
    public int id { get; set; }

    // Step 1 variables
    private MudForm _formStep1;
    private bool _isValidStep1 = false;
    private bool _isSubmitting = false;
    private string[] _errorsStep1 = Array.Empty<string>();
    private int _currentStep = 1;
    private AtividadeModel _atividadeModel = new();

    // Step 2 variables
    private List<QuestaoResponse> _allQuestions = new();
    private bool _isLoading = true;
    private string _searchString = "";
    private string _selectedDifficulty = "";
    private string _selectedTopic = "";
    private List<string> _uniqueTopics = new();
    private Dictionary<int, bool> IsSelected = new Dictionary<int, bool>();
    private int SelectedQuestionsCount => IsSelected.Count(kv => kv.Value);

    protected override async Task OnInitializedAsync()
    {
        await LoadActivityData();
        await LoadAllQuestions();
    }

    private async Task LoadActivityData()
    {
        try
        {
            var atividade = await AtividadesAPI.GetAtividadeByIdAsync(id);
            if (atividade != null)
            {
                _atividadeModel.NomeAtividade = atividade.NomeAtividade;
                
                // Initialize selected questions
                if (atividade.TbQuestoesIdQuestoes != null)
                {
                    foreach (var questionId in atividade.TbQuestoesIdQuestoes)
                    {
                        IsSelected[questionId] = true;
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao carregar atividade: {ex.Message}", Severity.Error);
            NavManager.NavigateTo("/atividades");
        }
    }

    private async Task LoadAllQuestions()
    {
        _isLoading = true;
        try
        {
            var response = await QuestoesAPI.GetQuestoesAsync();
            _allQuestions = response?.ToList() ?? new();
            _uniqueTopics = _allQuestions.Select(q => q.TemaQuestao).Distinct().ToList();
            
            // Initialize all questions in the dictionary
            foreach (var question in _allQuestions)
            {
                if (!IsSelected.ContainsKey(question.IdQuestao))
                {
                    IsSelected[question.IdQuestao] = false;
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao carregar questões: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private IEnumerable<QuestaoResponse> FilteredQuestions => _allQuestions
        .Where(q => string.IsNullOrWhiteSpace(_searchString) ||
                    q.EnunciadoQuestao.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
                    q.TemaQuestao.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
        .Where(q => string.IsNullOrEmpty(_selectedDifficulty) ||
                    q.DificuldadeQuestao == _selectedDifficulty)
        .Where(q => string.IsNullOrEmpty(_selectedTopic) ||
                    q.TemaQuestao == _selectedTopic)
        .ToList();

    private void ClearSelection()
    {
        var keys = IsSelected.Keys.ToList();
        foreach (var key in keys)
        {
            IsSelected[key] = false;
        }
        StateHasChanged();
    }

    private Color GetDifficultyColor(string difficulty)
    {
        return difficulty switch
        {
            "Fácil" => Color.Success,
            "Médio" => Color.Warning,
            "Difícil" => Color.Error,
            _ => Color.Default
        };
    }

    private async Task ProceedToStep2()
    {
        await _formStep1.Validate();
        if (!_isValidStep1) return;

        _currentStep = 2;
    }

    private void BackToStep1()
    {
        _currentStep = 1;
    }

    private async Task HandleSubmit()
    {
        _isSubmitting = true;

        try
        {
            // Update activity name
            var updateRequest = new AtividadeEditRequest(
                IdAtividade: id,
                NomeAtividade: _atividadeModel.NomeAtividade,
                TbQuestoesIdQuestoes: null
            );
            await AtividadesAPI.UpdateAtividadeAsync(updateRequest);

            // Get current associations
            var currentActivity = await AtividadesAPI.GetAtividadeByIdAsync(id);
            var currentQuestionIds = currentActivity?.TbQuestoesIdQuestoes ?? new List<int>();

            // Get selected question IDs
            var selectedQuestionIds = IsSelected
                .Where(kv => kv.Value)
                .Select(kv => kv.Key)
                .ToList();

            // Add new associations
            foreach (var questionId in selectedQuestionIds.Where(id => !currentQuestionIds.Contains(id)))
            {
                await AtividadesAPI.AddQuestaoToAtividadeAsync(id, questionId);
            }

            // Remove old associations
            foreach (var questionId in currentQuestionIds.Where(id => !selectedQuestionIds.Contains(id)))
            {
                await AtividadesAPI.RemoveQuestaoFromAtividadeAsync(id, questionId);
            }

            Snackbar.Add("Atividade atualizada com sucesso!", Severity.Success);
            NavManager.NavigateTo($"/atividade/{id}");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao atualizar atividade: {ex.Message}", Severity.Error);
            _isSubmitting = false;
        }
    }

    private bool CanSubmit =>
    _currentStep switch
    {
        0 => _isValidStep1 && !_isSubmitting,
        1 => !_isSubmitting, // Allow saving even with 0 questions
        _ => false
    };

    private async Task HandleStepAction()
    {
        if (_currentStep == 0)
        {
            await _formStep1.Validate();
            if (_isValidStep1)
                _currentStep = 1;
        }
        else if (_currentStep == 1)
        {
            await HandleSubmit();
        }
    }

    private RenderFragment Step1Content => __builder =>
    {
        <MudForm @ref="_formStep1" @bind-IsValid="_isValidStep1" @bind-Errors="_errorsStep1" Class="mt-4">
            <MudTextField @bind-Value="_atividadeModel.NomeAtividade"
                          Label="Nome da Atividade *"
                          Variant="Variant.Outlined"
                          Required="true"
                          RequiredError="O nome da atividade é obrigatório"
                          FullWidth="true"
                          Class="mb-4" />
        </MudForm>
    };

    private RenderFragment Step2Content => __builder =>
    {
        <div>
            <!-- Filters + Question Table + Selection Summary here (unchanged) -->
        </div>
    };

    public class AtividadeModel
    {
        public string NomeAtividade { get; set; } = string.Empty;
    }
}