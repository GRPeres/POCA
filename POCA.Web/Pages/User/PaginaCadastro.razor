@page "/cadastro"
@using MudBlazor
@using POCA.Web
@using POCA.Web.Requests.Pessoa
@using POCA.Web.Services
@using POCA.Web.Requests.Aluno
@using System.Security.Cryptography
@using System.Text
@using POCA.Web.Services.APIs
@inject PessoasAPI PessoasAPI
@inject AlunosAPI AlunosAPI
@inject UserSessionService UserSession
@inject NavigationManager NavigationManager
@inject IConfiguration Configuration
@inject ISnackbar Snackbar

<MudPaper Class="pa-6 mx-auto mt-12" Elevation="10" MaxWidth="500px">
    <MudText Typo="Typo.h5" Class="mb-4 text-center">Cadastro</MudText>

    @if (!UserSession.IsLoggedIn)
    {
        @if (deuErro)
        {
            <MudAlert Severity="Severity.Error" Dense="true" Class="mb-3">
                @apiResponse
            </MudAlert>
        }

        <MudTextField @bind-Value="Credenciais.LoginUsuario"
                      Label="Login"
                      Variant="Variant.Outlined"
                      Required
                      RequiredError="Coloque um nome de usuário"
                      Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.AccountCircle"
                      Class="mb-3" />

        <MudTextField @bind-Value="Credenciais.nomeUsuario"
                      Label="Nome"
                      Variant="Variant.Outlined"
                      Required
                      RequiredError="Coloque seu nome"
                      Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Person"
                      Class="mb-3" />

        <MudTextField @bind-Value="Credenciais.ContatoUsuario"
                      Label="Email"
                      Variant="Variant.Outlined"
                      InputType="InputType.Email"
                      Required
                      RequiredError="Coloque seu email"
                      Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Email"
                      Class="mb-3" />

        <MudTextField @bind-Value="Credenciais.SenhaUsuario"
                      Label="Senha"
                      Variant="Variant.Outlined"
                      InputType="(_showPassword ? InputType.Text : InputType.Password)"
                      Adornment="Adornment.End"
                      AdornmentIcon="@(_showPassword ? Icons.Material.Filled.VisibilityOff : Icons.Material.Filled.Visibility)"
                      OnAdornmentClick="TogglePasswordVisibility"
                      Required
                      RequiredError="Coloque sua senha"
                      Class="mb-3" />

        @if (SenhaErrada)
        {
            <MudAlert Severity="Severity.Warning" Dense="true" Class="mb-3">
                As senhas não são iguais
            </MudAlert>
        }

        <MudTextField @bind-Value="Credenciais.confirmarSenhaUsuario"
                      Label="Confirme sua Senha"
                      Variant="Variant.Outlined"
                      InputType="(_showPasswordConfirmation ? InputType.Text : InputType.Password)"
                      Adornment="Adornment.End"
                      AdornmentIcon="@(_showPasswordConfirmation ? Icons.Material.Filled.VisibilityOff : Icons.Material.Filled.Visibility)"
                      OnAdornmentClick="TogglePasswordConfirmationVisibility"
                      Required
                      RequiredError="Confirme a senha"
                      Class="mb-3" />

        <MudTextField @bind-Value="Credenciais.IdadeUsuario"
                      Label="Idade"
                      Variant="Variant.Outlined"
                      InputType="InputType.Number"
                      Required
                      RequiredError="Coloque sua idade"
                      Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.CalendarToday"
                      Class="mb-4" />

        <MudStack Direction="Column" Spacing="2">
            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       OnClick="EfetuarCadastro"
                       Disabled="@(!IsFormValid)"
                       FullWidth="true">
                Criar Conta
            </MudButton>

            <MudButton Variant="Variant.Outlined"
                       Color="Color.Secondary"
                       OnClick="NavigateLogin"
                       FullWidth="true">
                Já tenho uma conta
            </MudButton>
        </MudStack>

        @if (teste)
        {
            <MudAlert Severity="Severity.Success" Dense="true" Class="mt-3">
                Cadastro realizado com sucesso!
            </MudAlert>
        }
    }
    else
    {
        <MudText Typo="Typo.h6" Class="text-center mb-4">Você já está logado</MudText>
        <MudButton Variant="Variant.Filled"
                   Color="Color.Primary"
                   OnClick="NavigateMain"
                   FullWidth="true">
            Voltar
        </MudButton>
    }
</MudPaper>

@code
{
    public string apiResponse = "";
    private bool teste = false;
    private bool SenhaErrada = false;
    private bool deuErro = false;
    private bool _showPassword = false;
    private bool _showPasswordConfirmation = false;


    private bool IsFormValid => !string.IsNullOrWhiteSpace(Credenciais.nomeUsuario) &&
                            !string.IsNullOrWhiteSpace(Credenciais.SenhaUsuario) &&
                            !string.IsNullOrWhiteSpace(Credenciais.confirmarSenhaUsuario) &&
                            !int.IsNegative(Credenciais.IdadeUsuario) &&
                            Credenciais.IdadeUsuario >= 1;

    private CadastroModel Credenciais = new();

    // Obrigatorio para usar o UserSession
    protected override void OnInitialized()
    {
        UserSession.OnChange += HandleUserSessionChanged;
    }

    private void HandleUserSessionChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        UserSession.OnChange -= HandleUserSessionChanged;
    }

    // Para o cadastro

    private void TogglePasswordVisibility()
    {
        _showPassword = !_showPassword;
    }

    private void TogglePasswordConfirmationVisibility()
    {
        _showPasswordConfirmation = !_showPasswordConfirmation;
    }

    public void NavigateMain()
    {
        NavigationManager.NavigateTo("/");
    }

    public void NavigateLogin()
    {
        NavigationManager.NavigateTo("/login");
    }

    private class CadastroModel
    {
        public string LoginUsuario { get; set; } = string.Empty;
        public string nomeUsuario { get; set; } = string.Empty;
        public string ContatoUsuario { get; set; } = string.Empty;
        public string SenhaUsuario { get; set; } = string.Empty;
        public string confirmarSenhaUsuario { get; set; } = string.Empty;
        public int IdadeUsuario { get; set; } = 0;
        public bool isProfessorUsuario { get; set; } = false;
    }

    public async Task EfetuarCadastro()
    {
        if (Credenciais.SenhaUsuario == Credenciais.confirmarSenhaUsuario)
        {
            await TestCreateAluno();
            teste = true;

            await  EfetuarLogin();
        }
        else
        {
            SenhaErrada = true;
        }
    }

    private async Task TestCreateAluno()
    {
        try
        {
            // First create aluno
            var alunoRequest = new AlunoCreateRequest(
                NomeAluno: Credenciais.nomeUsuario,
                IdadeAluno: Credenciais.IdadeUsuario,
                ProgressoAluno: 0,
                ContatoAluno: Credenciais.ContatoUsuario
            );

            var createdAluno = await AlunosAPI.AddAlunosAsync(alunoRequest);

            if (createdAluno == null)
            {
                apiResponse = "Failed to create aluno";
                return;
            }

            // Then create pessoa account for this aluno
            var pessoaRequest = new PessoaCreateRequest(
                LoginPessoa: Credenciais.LoginUsuario,
                SenhaPessoa: HashPassword(Credenciais.SenhaUsuario),
                IsProfessor: false,
                IdAluno: createdAluno.IdAluno
            );

            var createdPessoa = await PessoasAPI.CreatePessoaAsync(pessoaRequest);

            apiResponse = $"Created aluno and pessoa accounts:\n" +
                         $"Aluno: {FormatJsonResponse(createdAluno)}\n" +
                         $"Pessoa: {FormatJsonResponse(createdPessoa)}";
        }
        catch (Exception ex)
        {
            deuErro = true;
            apiResponse = $"Error: {ex.Message}";
        }
    }

    private string HashPassword(string password)
    {
        var pepper = Configuration["Security:Pepper"] ?? string.Empty;
        using var sha256 = SHA256.Create();
        byte[] hashedBytes = sha256.ComputeHash(
            Encoding.UTF8.GetBytes(password + pepper));
        return Convert.ToBase64String(hashedBytes);
    }

    private string FormatJsonResponse(object obj)
    {
        return JsonSerializer.Serialize(obj, new JsonSerializerOptions
            {
                WriteIndented = true
            });
    }

    private async Task EfetuarLogin()
    {
        try
        {
            // Hash the password before sending
            var hashedPassword = HashPassword(Credenciais.SenhaUsuario);

            var authResponse = await PessoasAPI.LoginAsync(new PessoaLoginRequest(
                Login: Credenciais.LoginUsuario,
                Senha: hashedPassword
            ));

            if (authResponse != null)
            {
                await UserSession.Login(authResponse);
                Snackbar.Add("Cadastro Bem sucessido", Severity.Success);
                NavigationManager.NavigateTo("/");
            }
            else
            {
                apiResponse = "Credenciais inválidas";
            }
        }
        catch (Exception ex)
        {
            deuErro = true;
            apiResponse = $"Erro durante o login: {ex.Message}";
        }
    }
}
