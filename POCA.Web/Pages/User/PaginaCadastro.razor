@page "/cadastro"
@using MudBlazor
@using POCA.Web
@using POCA.Web.Requests.Pessoa
@using POCA.Web.Services
@using POCA.Web.Requests.Aluno
@using System.Security.Cryptography
@using System.Text
@using POCA.Web.Services.APIs
@inject PessoasAPI PessoasAPI
@inject AlunosAPI AlunosAPI
@inject UserSessionService UserSession
@inject NavigationManager NavigationManager
@inject IConfiguration Configuration
@inject ISnackbar Snackbar

<MudText>Cadastro</MudText>
@if (!UserSession.IsLoggedIn)
{
    @if (deuErro)
    {
        <MudAlert>@apiResponse</MudAlert>
    }

    <MudTextField @bind-Value="Credenciais.LoginUsuario"
                  Label="Login"
                  Variant="Variant.Filled"
                  Required
                  RequiredError="Coloque um Nome" />

    <MudTextField @bind-Value="Credenciais.nomeUsuario"
                  Label="Nome"
                  Variant="Variant.Filled"
                  Required
                  RequiredError="Coloque seu Nome" />

    <MudTextField @bind-Value="Credenciais.ContatoUsuario"
                  Label="Contato"
                  Variant="Variant.Filled"
                  InputType="InputType.Email"
                  Required
                  RequiredError="Coloque seu email"
                  Class="mt-3" />

    <MudTextField @bind-Value="Credenciais.SenhaUsuario"
                  Label="Senha"
                  Variant="Variant.Filled"
                  InputType="(_showPassword ? InputType.Text : InputType.Password)"
                  Adornment="Adornment.End"
                  AdornmentIcon="@(_showPassword? Icons.Material.Filled.VisibilityOff : Icons.Material.Filled.Visibility)"
                  OnAdornmentClick="TogglePasswordVisibility"
                  Touched="true"
                  Required="true"
                  RequiredError="Coloque sua senha"
                  Class="mt-3" />

    @if (SenhaErrada)
    {
        <MudAlert>As senhas não são iguais</MudAlert>
    }

    <MudTextField @bind-Value="Credenciais.confirmarSenhaUsuario"
                  Label="Confirme sua Senha"
                  Variant="Variant.Filled"
                  InputType="(_showPasswordConfirmation ? InputType.Text : InputType.Password)"
                  Adornment="Adornment.End"
                  AdornmentIcon="@(_showPasswordConfirmation? Icons.Material.Filled.VisibilityOff : Icons.Material.Filled.Visibility)"
                  OnAdornmentClick="TogglePasswordVisibility"
                  Touched="true"
                  Required="true"
                  RequiredError="Confirme a senha"
                  Class="mt-3" />

    <MudTextField @bind-Value="Credenciais.IdadeUsuario"
                  Label="Idade"
                  Variant="Variant.Filled"
                  InputType="InputType.Number"
                  Required
                  RequiredError="Coloque sua Idade"
                  Class="mt-3" />

    <MudButton Variant="Variant.Filled"
               Color="Color.Primary"
               Class="mt-4"
               OnClick="EfetuarCadastro"
               Disabled="@(!IsFormValid)">
        Entrar
    </MudButton>
    <MudButton Variant="Variant.Filled"
               Color="Color.Primary"
               Class="mt-4"
               OnClick="NavigateLogin">
        Logar
    </MudButton>

    @if (teste)
    {
        <MudAlert>foi</MudAlert>
    }
}
else
{
    <MudText>Você já está logado</MudText>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mt-4" OnClick="NavigateMain">Voltar</MudButton>
}

@code
{
    public string apiResponse = "";
    private bool teste = false;
    private bool SenhaErrada = false;
    private bool deuErro = false;
    private bool _showPassword = false;
    private bool _showPasswordConfirmation = false;


    private bool IsFormValid => !string.IsNullOrWhiteSpace(Credenciais.nomeUsuario) &&
                            !string.IsNullOrWhiteSpace(Credenciais.SenhaUsuario) &&
                            !string.IsNullOrWhiteSpace(Credenciais.confirmarSenhaUsuario) &&
                            !int.IsNegative(Credenciais.IdadeUsuario) &&
                            Credenciais.IdadeUsuario >= 1;

    private CadastroModel Credenciais = new();

    // Obrigatorio para usar o UserSession
    protected override void OnInitialized()
    {
        UserSession.OnChange += HandleUserSessionChanged;
    }

    private void HandleUserSessionChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        UserSession.OnChange -= HandleUserSessionChanged;
    }

    // Para o cadastro

    private void TogglePasswordVisibility()
    {
        _showPassword = !_showPassword;
    }

    private void TogglePasswordConfirmationVisibility()
    {
        _showPassword = !_showPasswordConfirmation;
    }

    public void NavigateMain()
    {
        NavigationManager.NavigateTo("/");
    }

    public void NavigateLogin()
    {
        NavigationManager.NavigateTo("/login");
    }

    private class CadastroModel
    {
        public string LoginUsuario { get; set; } = string.Empty;
        public string nomeUsuario { get; set; } = string.Empty;
        public string ContatoUsuario { get; set; } = string.Empty;
        public string SenhaUsuario { get; set; } = string.Empty;
        public string confirmarSenhaUsuario { get; set; } = string.Empty;
        public int IdadeUsuario { get; set; } = 0;
        public bool isProfessorUsuario { get; set; } = false;
    }

    public async Task EfetuarCadastro()
    {
        if (Credenciais.SenhaUsuario == Credenciais.confirmarSenhaUsuario)
        {
            await TestCreateAluno();
            teste = true;

            await  EfetuarLogin();
        }
        else
        {
            SenhaErrada = true;
        }
    }

    private async Task TestCreateAluno()
    {
        try
        {
            // First create aluno
            var alunoRequest = new AlunoCreateRequest(
                NomeAluno: Credenciais.nomeUsuario,
                IdadeAluno: Credenciais.IdadeUsuario,
                ProgressoAluno: 0,
                ContatoAluno: Credenciais.ContatoUsuario
            );

            var createdAluno = await AlunosAPI.AddAlunosAsync(alunoRequest);

            if (createdAluno == null)
            {
                apiResponse = "Failed to create aluno";
                return;
            }

            // Then create pessoa account for this aluno
            var pessoaRequest = new PessoaCreateRequest(
                LoginPessoa: Credenciais.LoginUsuario,
                SenhaPessoa: HashPassword(Credenciais.SenhaUsuario),
                IsProfessor: false,
                IdAluno: createdAluno.IdAluno
            );

            var createdPessoa = await PessoasAPI.CreatePessoaAsync(pessoaRequest);

            apiResponse = $"Created aluno and pessoa accounts:\n" +
                         $"Aluno: {FormatJsonResponse(createdAluno)}\n" +
                         $"Pessoa: {FormatJsonResponse(createdPessoa)}";
        }
        catch (Exception ex)
        {
            deuErro = true;
            apiResponse = $"Error: {ex.Message}";
        }
    }

    private string HashPassword(string password)
    {
        var pepper = Configuration["Security:Pepper"] ?? string.Empty;
        using var sha256 = SHA256.Create();
        byte[] hashedBytes = sha256.ComputeHash(
            Encoding.UTF8.GetBytes(password + pepper));
        return Convert.ToBase64String(hashedBytes);
    }

    private string FormatJsonResponse(object obj)
    {
        return JsonSerializer.Serialize(obj, new JsonSerializerOptions
            {
                WriteIndented = true
            });
    }

    private async Task EfetuarLogin()
    {
        try
        {
            // Hash the password before sending
            var hashedPassword = HashPassword(Credenciais.SenhaUsuario);

            var authResponse = await PessoasAPI.LoginAsync(new PessoaLoginRequest(
                Login: Credenciais.LoginUsuario,
                Senha: hashedPassword
            ));

            if (authResponse != null)
            {
                await UserSession.Login(authResponse);
                Snackbar.Add("Cadastro Bem sucessido", Severity.Success);
                NavigationManager.NavigateTo("/");
            }
            else
            {
                apiResponse = "Credenciais inválidas";
            }
        }
        catch (Exception ex)
        {
            deuErro = true;
            apiResponse = $"Erro durante o login: {ex.Message}";
        }
    }
}
