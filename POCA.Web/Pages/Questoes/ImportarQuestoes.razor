@page "/importar-questoes"
@using POCA.Web.Services.APIs
@using System.Net
@inject QuestoesAPI QuestoesService
@inject NavigationManager NavManager
@inject ISnackbar Snackbar
@inject IJSRuntime JS

<MudContainer MaxWidth="MaxWidth.Medium" Class="py-6">
    <MudPaper Elevation="4" Class="pa-6 rounded-lg">
        <div class="d-flex align-center mb-4">
            <MudIconButton Icon="@Icons.Material.Filled.ArrowBack"
                           Color="Color.Primary"
                           Variant="Variant.Text"
                           Href="/questoes"
                           Class="mr-2" />
            <MudText Typo="Typo.h4">Importar Questões</MudText>
        </div>

        <!-- Zona de Upload -->
        <MudPaper Elevation="2"
                  Class="pa-6 mb-4 rounded-lg border-dashed border-2"
                  Style="cursor: pointer;"
                  OnClick="OpenFileDialog">
            <div class="d-flex flex-column align-center text-center">
                <MudIcon Icon="@Icons.Material.Filled.CloudUpload" Size="Size.Large" Class="mb-2" />
                <MudText Typo="Typo.h6" Class="mb-2">Selecione seu arquivo CSV</MudText>
                <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-3">
                    O arquivo deve conter as colunas: Enunciado, Resposta Correta, Resposta Errada 1,
                    Resposta Errada 2, Resposta Errada 3, Dificuldade, Tema
                </MudText>
                <MudButton Variant="Variant.Outlined"
                           Color="Color.Primary"
                           StartIcon="@Icons.Material.Filled.Upload"
                           OnClick="OpenFileDialog">
                    Selecionar Arquivo
                </MudButton>
                <InputFile @ref="_fileInput"
                           style="display: none;"
                           accept=".csv"
                           OnChange="OnFileSelected" />
            </div>
        </MudPaper>

        @if (_isProcessing)
        {
            <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="mb-4" />
        }

        @if (_responseMessage != null)
        {
            <MudAlert Severity="@(_responseMessage.IsSuccessStatusCode ? Severity.Success : Severity.Error)"
                      Class="mb-4">
                @_responseMessage.ReasonPhrase
            </MudAlert>
        }
    </MudPaper>
</MudContainer>

@code {
    private InputFile? _fileInput;
    private HttpResponseMessage? _responseMessage;
    private bool _isProcessing = false;

    private async Task OpenFileDialog()
    {
        if (_fileInput != null)
            await JS.InvokeVoidAsync("triggerFileInputClick", _fileInput.Element);
    }

    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        _isProcessing = true;
        _responseMessage = null;

        try
        {
            var file = e.File;
            var response = await ProcessFile(file);
            _responseMessage = response;

            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add($"{_lastImportCount} questões importadas com sucesso!", Severity.Success);
                await Task.Delay(1000);
                NavManager.NavigateTo("/questoes");
            }
            else
            {
                Snackbar.Add($"Falha ao importar questões: {response.ReasonPhrase}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao processar arquivo: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isProcessing = false;
        }
    }

    private int _lastImportCount = 0;

    private async Task<HttpResponseMessage> ProcessFile(IBrowserFile file)
    {
        if (file.ContentType != "text/csv" && !file.Name.EndsWith(".csv"))
        {
            Snackbar.Add("Por favor, envie um arquivo CSV válido.", Severity.Warning);
            return new HttpResponseMessage(HttpStatusCode.BadRequest) { ReasonPhrase = "Tipo de arquivo inválido" };
        }

        using var stream = file.OpenReadStream(5 * 1024 * 1024);
        using var reader = new StreamReader(stream);
        var csv = await reader.ReadToEndAsync();

        var lista = ParseCsvToQuestions(csv);
        _lastImportCount = lista.Count;

        if (lista.Count == 0)
        {
            Snackbar.Add("CSV vazio ou mal formatado.", Severity.Error);
            return new HttpResponseMessage(HttpStatusCode.BadRequest) { ReasonPhrase = "CSV inválido" };
        }

        return await QuestoesService.ImportQuestoesBatchAsync(new QuestaoBatchImportRequest(lista));
    }

    private List<QuestaoImportModel> ParseCsvToQuestions(string csvContent)
    {
        var outList = new List<QuestaoImportModel>();
        var lines = csvContent.Split(new[] { "\r\n", "\n" }, StringSplitOptions.RemoveEmptyEntries);

        foreach (var line in lines.Skip(1))
        {
            var cols = line.Split(',');
            if (cols.Length < 7) continue;

            outList.Add(new QuestaoImportModel
                {
                    EnunciadoQuestao = cols[0].Trim(),
                    RespostaCertaQuestao = cols[1].Trim(),
                    RespostaErrada1Questao = cols[2].Trim(),
                    RespostaErrada2Questao = cols[3].Trim(),
                    RespostaErrada3Questao = cols[4].Trim(),
                    DificuldadeQuestao = cols[5].Trim(),
                    TemaQuestao = cols[6].Trim()
                });
        }

        return outList;
    }
}
