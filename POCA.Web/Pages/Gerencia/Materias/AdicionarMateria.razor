@page "/adicionar-materia"
@using POCA.Web.Services.APIs
@using POCA.API.Responses
@inject MateriasAPI MateriasAPI
@inject ProfessoresAPI ProfessoresAPI
@inject AlunosAPI AlunosAPI
@inject AtividadesAPI AtividadesAPI
@inject NavigationManager NavManager
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.Large" Class="py-6">
    <MudPaper Elevation="4" Class="pa-6 rounded-lg">
        <MudText Typo="Typo.h4" Class="mb-4">Adicionar Nova Matéria</MudText>

        <MudStepper @bind-ActiveStep="_currentStep" Elevation="0" Linear="true" HideNavigation="true">
            <MudStep Label="Nome da Matéria" Completed="_currentStep > 0">
                <MudStepContent>
                    <MudForm @ref="_formStep1" @bind-IsValid="_isValidStep1">
                        <MudTextField @bind-Value="_nomeMateriaInput"
                        Label="Nome da Matéria *"
                        Required="true"
                        RequiredError="O nome é obrigatório"
                        Variant="Variant.Outlined"
                        FullWidth="true" />
                    </MudForm>
                </MudStepContent>
            </MudStep>

            <MudStep Label="Selecionar Professores" Completed="_currentStep > 1">
                <MudStepContent>
                    <MudTextField @bind-Value="_searchProfessor" Placeholder="Pesquisar professores..." Variant="Variant.Outlined" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" Class="mb-2" FullWidth="true" />

                    <MudTable Items="@FilteredProfessores" Hover="true" Bordered="true" Dense="true">
                        <HeaderContent>
                            <MudTh>Selecionar</MudTh>
                            <MudTh>Nome</MudTh>
                        </HeaderContent>
                        <RowTemplate Context="professor">
                            <MudTd>
                                <MudCheckBox T="bool" @bind-Value="IsSelectedProfessor[professor.IdProfessor]" />
                            </MudTd>
                            <MudTd>@professor.NomeProfessor</MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudStepContent>
            </MudStep>

            <MudStep Label="Selecionar Alunos" Completed="_currentStep > 2">
                <MudStepContent>
                    <MudTextField @bind-Value="_searchAluno" Placeholder="Pesquisar alunos..." Variant="Variant.Outlined" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" Class="mb-2" FullWidth="true" />

                    <MudTable Items="@FilteredAlunos" Hover="true" Bordered="true" Dense="true">
                        <HeaderContent>
                            <MudTh>Selecionar</MudTh>
                            <MudTh>Nome</MudTh>
                        </HeaderContent>
                        <RowTemplate Context="aluno">
                            <MudTd>
                                <MudCheckBox T="bool" @bind-Value="IsSelectedAluno[aluno.IdAluno]" />
                            </MudTd>
                            <MudTd>@aluno.NomeAluno</MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudStepContent>
            </MudStep>

            <MudStep Label="Selecionar Atividades" Completed="_currentStep > 3">
                <MudStepContent>
                    <MudTextField @bind-Value="_searchAtividade" Placeholder="Pesquisar atividades..." Variant="Variant.Outlined" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" Class="mb-2" FullWidth="true" />

                    <MudTable Items="@FilteredAtividades" Hover="true" Bordered="true" Dense="true">
                        <HeaderContent>
                            <MudTh>Selecionar</MudTh>
                            <MudTh>Nome</MudTh>
                        </HeaderContent>
                        <RowTemplate Context="atividade">
                            <MudTd>
                                <MudCheckBox T="bool" @bind-Value="IsSelectedAtividade[atividade.IdAtividade]" />
                            </MudTd>
                            <MudTd>@atividade.NomeAtividade</MudTd>
                        </RowTemplate>
                    </MudTable>


                    <MudButton OnClick="HandleSubmit" Disabled="_isSubmitting" Variant="Variant.Filled" Color="Color.Primary">
                        @if (_isSubmitting)
                        {
                            <MudProgressCircular Indeterminate="true" Size="Size.Small" Color="Color.Inherit" Class="me-2" />
                            <MudText>Salvando...</MudText>
                        }
                        else
                        {
                            <MudText>Salvar</MudText>
                        }
                    </MudButton>
                </MudStepContent>
            </MudStep>
        </MudStepper>
    </MudPaper>
</MudContainer>

@code {
    private int _currentStep = 0;
    private bool _isValidStep1 = false;
    private bool _isSubmitting = false;

    private MudForm _formStep1;
    private string _nomeMateriaInput = "";

    private ICollection<ProfessorResponse> _professores = new List<ProfessorResponse>();
    private ICollection<AlunoResponse> _alunos = new List<AlunoResponse>();
    private ICollection<AtividadeResponse> _atividades = new List<AtividadeResponse>();

    private Dictionary<int, bool> IsSelectedProfessor = new();
    private Dictionary<int, bool> IsSelectedAluno = new();
    private Dictionary<int, bool> IsSelectedAtividade = new();

    private string _searchProfessor = "";
    private string _searchAluno = "";
    private string _searchAtividade = "";

    protected override async Task OnInitializedAsync()
    {
        _professores = await ProfessoresAPI.GetProfessoresAsync() ?? new List<ProfessorResponse>();
        _alunos = await AlunosAPI.GetAlunosAsync() ?? new List<AlunoResponse>();
        _atividades = await AtividadesAPI.GetAtividadesAsync() ?? new List<AtividadeResponse>();

        IsSelectedProfessor = _professores.ToDictionary(p => p.IdProfessor, _ => false);
        IsSelectedAluno = _alunos.ToDictionary(a => a.IdAluno, _ => false);
        IsSelectedAtividade = _atividades.ToDictionary(a => a.IdAtividade, _ => false);
    }

    private IEnumerable<ProfessorResponse> FilteredProfessores =>
        _professores.Where(p => string.IsNullOrWhiteSpace(_searchProfessor) || p.NomeProfessor.Contains(_searchProfessor, StringComparison.OrdinalIgnoreCase));

    private IEnumerable<AlunoResponse> FilteredAlunos =>
        _alunos.Where(a => string.IsNullOrWhiteSpace(_searchAluno) || a.NomeAluno.Contains(_searchAluno, StringComparison.OrdinalIgnoreCase));

    private IEnumerable<AtividadeResponse> FilteredAtividades =>
        _atividades.Where(a => string.IsNullOrWhiteSpace(_searchAtividade) || a.NomeAtividade.Contains(_searchAtividade, StringComparison.OrdinalIgnoreCase));

    private async Task GoToStep2()
    {
        await _formStep1.Validate();
        if (_isValidStep1)
            _currentStep = 1;
    }

    private void GoToStep3()
    {
        _currentStep = 2;
    }

    private void GoToStep4()
    {
        _currentStep = 3;
    }

    private void BackToStep1()
    {
        _currentStep = 0;
    }

    private void BackToStep2()
    {
        _currentStep = 1;
    }

    private void BackToStep3()
    {
        _currentStep = 2;
    }

    private async Task HandleSubmit()
    {
        _isSubmitting = true;

        try
        {
            var materiaRequest = new MateriaCreateRequest
                {
                    NomeMateria = _nomeMateriaInput
                };

            var createdMateria = await MateriasAPI.AddMateriaAsync(materiaRequest);

            if (createdMateria != null)
            {
                var idMateria = createdMateria.IdMateria;
                Console.WriteLine($"Created Materia with Id: {idMateria}");

                // Associate selected Professores
                foreach (var professorId in IsSelectedProfessor.Where(p => p.Value).Select(p => p.Key))
                {
                    Console.WriteLine($"Adding Professor Id: {professorId} to Materia Id: {idMateria}");
                    var success = await MateriasAPI.AddProfessorToMateriaAsync(idMateria, professorId);
                    Console.WriteLine(success
                        ? $"Successfully added Professor {professorId}"
                        : $"Failed to add Professor {professorId}");
                }

                // Associate selected Alunos
                foreach (var alunoId in IsSelectedAluno.Where(a => a.Value).Select(a => a.Key))
                {
                    Console.WriteLine($"Adding Aluno Id: {alunoId} to Materia Id: {idMateria}");
                    var success = await MateriasAPI.AddAlunoToMateriaAsync(idMateria, alunoId);
                    Console.WriteLine(success
                        ? $"Successfully added Aluno {alunoId}"
                        : $"Failed to add Aluno {alunoId}");
                }

                // Associate selected Atividades
                foreach (var atividadeId in IsSelectedAtividade.Where(a => a.Value).Select(a => a.Key))
                {
                    Console.WriteLine($"Adding Atividade Id: {atividadeId} to Materia Id: {idMateria}");
                    var success = await MateriasAPI.AddAtividadeToMateriaAsync(idMateria, atividadeId);
                    Console.WriteLine(success
                        ? $"Successfully added Atividade {atividadeId}"
                        : $"Failed to add Atividade {atividadeId}");
                }

                Snackbar.Add("Matéria criada com sucesso!", Severity.Success);
                NavManager.NavigateTo("/materias");
            }
            else
            {
                Console.WriteLine("Failed to create Materia.");
                Snackbar.Add("Erro ao criar matéria.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception: {ex.Message}");
            Snackbar.Add($"Erro: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isSubmitting = false;
        }
    }

}
