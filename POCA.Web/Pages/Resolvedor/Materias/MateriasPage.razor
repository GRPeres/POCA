@page "/materia-sala/{idMateria:int}"
@using POCA.Web.Response
@using MudBlazor
@inject POCA.Web.Services.APIs.ProfessoresAPI ProfessoresAPI
@inject POCA.Web.Services.APIs.MateriasAPI MateriasAPI
@inject POCA.Web.Services.APIs.AtividadesAPI AtividadesAPI
@inject POCA.Web.Services.APIs.RespostasAPI RespostasAPI
@inject UserSessionService UserSession
@inject NavigationManager NavigationManager
@inject HttpClient Http

<PageTitle>Matéria</PageTitle>

<MudPaper Class="p-6 max-w-screen-lg mx-auto">
    @if (!UserSession.IsLoggedIn)
    {
        <MudPaper Elevation="1" Class="pa-4 ma-4 text-center">
            <MudText Typo="Typo.h6" Class="mb-4">Você não está logado</MudText>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="/login">Fazer Login</MudButton>
        </MudPaper>
    }
    else if (materia is null)
    {
        <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
    }
    else
    {
        <MudStack Row Class="mb-4">
            <MudText Typo="Typo.h5">@materia.NomeMateria</MudText>

            @if (UserSession.CurrentUser?.IsProfessor == true && !string.IsNullOrWhiteSpace(nomeProfessor))
            {
                <MudText Typo="Typo.subtitle2" Class="ml-4 text-secondary">
                    (Prof. @nomeProfessor)
                </MudText>
            }
        </MudStack>

        @if (mediaAluno.HasValue && (mediaAluno.Value < 5 || mediaAluno.Value == 0))
        {
            <MudAlert Severity="Severity.Warning" Variant="Variant.Filled" Class="mb-4">
                Sua média está baixa ( @mediaAluno ). Vamos fazer um reforço?
                <MudButton Color="Color.Error" Variant="Variant.Outlined" Class="ml-4" OnClick="RecarregarPagina">
                    Fazer Reforço
                </MudButton>
            </MudAlert>
        }

        @if (!mediaAluno.HasValue)
        {
            <MudText>Carregando a média...</MudText>  <!-- Para monitorar o processo de carregamento -->
        }



        <MudExpansionPanels MultiExpansion="true" ExpandIcon="@Icons.Material.Filled.ExpandMore">
            <MudExpansionPanel Text="Geral">
                <MudList T="string" Dense="true">
                    <MudListItem Icon="@Icons.Material.Filled.Notifications">Avisos</MudListItem>

                    @if (UserSession.CurrentUser?.IdAluno != null)
                    {
                        <MudListItem>
                            <MudButton Variant="Variant.Filled"
                                       Color="Color.Secondary"
                                       OnClick="@CalcularMedia"
                                       StartIcon="@Icons.Material.Filled.Calculate">
                                Calcular Média
                            </MudButton>
                        </MudListItem>

                        @if (media is not null)
                        {
                            <MudListItem>
                                <MudText Typo="Typo.body1">Média: @media.Value.ToString("F2")</MudText>
                            </MudListItem>
                        }
                    }
                </MudList>
            </MudExpansionPanel>

            <MudExpansionPanel Text="Quizes e Atividades">
                @if (avaliacoes.Any())
                {
                    @foreach (var a in avaliacoes)
                    {
                        <MudButton Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   Class="mb-2"
                                   OnClick="@(() => NavegarParaAtividade(a.IdAtividade))"
                                   StartIcon="@Icons.Material.Filled.Assignment">
                            @a.NomeAtividade
                        </MudButton>
                    }
                }
                else
                {
                    <MudText>Nenhuma atividade encontrada.</MudText>
                }
            </MudExpansionPanel>

            <MudExpansionPanel Text="Materiais">
                @if (materiais.Any())
                {
                    @foreach (var m in materiais)
                    {
                        <MudListItem T="string" Icon="@Icons.Material.Filled.Folder">@m.Titulo</MudListItem>
                    }
                }
                else
                {
                    <MudText>Nenhum material encontrado.</MudText>
                }
            </MudExpansionPanel>
        </MudExpansionPanels>
    }
</MudPaper>

@code {
    [Parameter] public int idMateria { get; set; }

    private MateriaResponse? materia;
    private string? nomeProfessor;
    private List<AtividadeResponse> avaliacoes = new();
    private List<ItemMateria> materiais = new();
    private double? mediaAluno;

    protected override async Task OnInitializedAsync()
    {
        UserSession.OnChange += HandleUserSessionChanged;

        if (UserSession.IsLoggedIn)
        {
            await MateriasAtividades();
            await BuscarMediaAluno();
        }
    }

    private void RecarregarPagina()
    {
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }

    private async Task MateriasAtividades()
    {
        if (!UserSession.IsLoggedIn)
            return;

        materia = await MateriasAPI.GetMateriaAsync(idMateria);

        if (materia is not null)
        {
            // Buscar atividades da matéria
            if (materia.tbAtividadesIdAtividades is not null)
            {
                foreach (var id in materia.tbAtividadesIdAtividades)
                {
                    var atividade = await AtividadesAPI.GetAtividadeByIdAsync(id);
                    if (atividade is not null)
                        avaliacoes.Add(atividade);
                }
            }

            // Buscar nome do professor (apenas para professores)
            if (UserSession.CurrentUser?.IsProfessor == true)
            {
                var idProf = materia.tbProfessoresIdProfessors?.FirstOrDefault();
                if (idProf.HasValue)
                {
                    var professor = await ProfessoresAPI.GetProfessorbyidAsync(idProf.Value);
                    nomeProfessor = professor?.NomeProfessor;
                }
            }

            // Mock de materiais
            materiais = new()
            {
                new("Slides - Introdução"),
                new("PDF - Leitura obrigatória")
            };
        }
    }

    // ✅ Função que chama o endpoint de média
    private async Task BuscarMediaAluno()
    {
        var idAluno = UserSession.CurrentUser?.IdAluno;
        if (idAluno is null) return;

        try
        {
            // URL base do seu backend (verifique a porta que a API está rodando)
            var apiBase = "http://localhost:5000";  // Use http:// em vez de https://

            // Chama o endpoint completo para buscar a média
            var result = await Http.GetFromJsonAsync<MediaResponse>(
                $"{apiBase}/alunos/{idAluno}/materias/{idMateria}/media");

            if (result != null)
            {
                mediaAluno = result.Media;
                Console.WriteLine($"✅ Média do aluno: {mediaAluno}");
            }
            else
            {
                mediaAluno = 0;
                Console.WriteLine("⚠️ Nenhuma média retornada.");
            }
        }
        catch (Exception ex)
        {
            mediaAluno = null;
            Console.WriteLine($"❌ Erro ao buscar média: {ex.Message}");
        }
    }




    private void IrParaReforco()
    {
        NavigationManager.NavigateTo($"/reforco/{idMateria}");
    }

    private void HandleUserSessionChanged()
    {
        InvokeAsync(async () =>
        {
            if (UserSession.IsLoggedIn)
            {
                await MateriasAtividades();
                await BuscarMediaAluno();
                StateHasChanged();
            }
        });
    }

    private void NavegarParaAtividade(int idAtividade)
    {
        NavigationManager.NavigateTo($"/atividadepage/{idAtividade}");
    }

    private async Task CalcularMedia()
    {
        if (UserSession.CurrentUser?.IdAluno != null)
        {
            media = await RespostasAPI.GetMediaPorMateriaAsync(UserSession.CurrentUser.IdAluno.Value, idMateria);
            StateHasChanged();
        }
    }

    public record ItemMateria(string Titulo);

    // ✅ Record auxiliar para deserializar a resposta do endpoint
    public record MediaResponse(double Media, int Acertos, int Total);
}
