@page "/login"
@using MudBlazor
@using POCA.Web
@using POCA.Web.Requests.Pessoa
@using POCA.Web.Services
@using System.Security.Cryptography
@using System.Text
@inject PessoasAPI PessoasAPI
@inject UserSessionService UserSession
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IConfiguration Configuration

<MudPaper Class="pa-6 mx-auto mt-12" Elevation="10" MaxWidth="400px">
    @if (!UserSession.IsLoggedIn)
    {
        <MudText Typo="Typo.h5" Class="mb-4 text-center">Login</MudText>

        @if (LoginFalha)
        {
            <MudAlert Severity="Severity.Error" Dense="true" Class="mb-3">
                Erro ao fazer login, credenciais inválidas.
            </MudAlert>
        }

        <MudTextField @bind-Value="Credenciais.Login"
                      Label="Usuário"
                      Variant="Variant.Outlined"
                      Required
                      RequiredError="Por favor insira seu usuário"
                      Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Person"
                      Class="mb-3" />

        <MudTextField @bind-Value="Credenciais.Senha"
                      Label="Senha"
                      Variant="Variant.Outlined"
                      InputType="(_showPassword ? InputType.Text : InputType.Password)"
                      Adornment="Adornment.End"
                      AdornmentIcon="@(_showPassword ? Icons.Material.Filled.VisibilityOff : Icons.Material.Filled.Visibility)"
                      OnAdornmentClick="TogglePasswordVisibility"
                      Required
                      RequiredError="Por favor insira sua senha"
                      Class="mb-4" />

        <MudStack Direction="Column" Spacing="2">
            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       OnClick="EfetuarLogin"
                       Disabled="@(!IsFormValid)"
                       FullWidth="true">
                Entrar
            </MudButton>

            <MudButton Variant="Variant.Outlined"
                       Color="Color.Secondary"
                       OnClick="navigateCadastro"
                       FullWidth="true">
                Criar conta
            </MudButton>
        </MudStack>
    }
    else
    {
        <MudText Typo="Typo.h6" Class="text-center mb-4">Você já está logado</MudText>
        <MudButton Variant="Variant.Filled"
                   Color="Color.Primary"
                   OnClick="navigateMain"
                   FullWidth="true">
            Voltar
        </MudButton>
    }
</MudPaper>


@code {
    private LoginModel Credenciais = new();
    private bool LoginFalha = false;
    private bool IsLoading = false;
    private bool _showPassword = false;

    private bool IsFormValid => !string.IsNullOrWhiteSpace(Credenciais.Login) &&
                              !string.IsNullOrWhiteSpace(Credenciais.Senha);

    protected override void OnInitialized()
    {
        UserSession.OnChange += HandleUserSessionChanged;

    }
    private void HandleUserSessionChanged()
    {
        InvokeAsync(StateHasChanged);
    }
    public void Dispose()
    {
        UserSession.OnChange -= HandleUserSessionChanged;
    }

    private class LoginModel
    {
        public string Login { get; set; } = string.Empty;
        public string Senha { get; set; } = string.Empty;
    }

    private string HashPassword(string password)
    {
        // Get pepper from configuration
        var pepper = Configuration["Security:Pepper"] ?? string.Empty;

        using var sha256 = SHA256.Create();
        byte[] hashedBytes = sha256.ComputeHash(
            Encoding.UTF8.GetBytes(password + pepper));
        return Convert.ToBase64String(hashedBytes);
    }

    private async Task EfetuarLogin()
    {
        IsLoading = true;
        LoginFalha = false;

        try
        {
            // Hash the password before sending
            var hashedPassword = HashPassword(Credenciais.Senha);

            var authResponse = await PessoasAPI.LoginAsync(new PessoaLoginRequest(
                Login: Credenciais.Login,
                Senha: hashedPassword
            ));

            if (authResponse != null)
            {
                await UserSession.Login(authResponse);
                Snackbar.Add("Login bem-sucedido!", Severity.Success);
                NavigationManager.NavigateTo("/");
            }
            else
            {
                LoginFalha = true;
            }
        }
        catch (Exception ex)
        {
            LoginFalha = true;
            Snackbar.Add($"Erro durante o login: {ex.Message}", Severity.Error);
        }
        finally
        {
            IsLoading = false;
        }
    }

    private void TogglePasswordVisibility()
    {
        _showPassword = !_showPassword;
    }

    private void navigateMain()
    {
        NavigationManager.NavigateTo("/");
    }

    private void navigateCadastro()
    {
        NavigationManager.NavigateTo("/cadastro");
    }
}