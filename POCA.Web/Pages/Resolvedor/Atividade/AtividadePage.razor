@page "/atividadepage/{idAtividade:int}"
@using MudBlazor
@using POCA.Web
@inject UserSessionService UserSession
@inject NavigationManager NavigationManager
@inject POCA.Web.Services.APIs.AtividadesAPI AtividadesAPI
@inject POCA.Web.Services.APIs.MateriasAPI MateriasAPI
@inject POCA.Web.Services.APIs.QuestoesAPI QuestoesAPI
@inject POCA.Web.Services.APIs.AlunosAPI AlunosAPI

<MudText Color="Color.Error" Typo="Typo.subtitle2">@erro</MudText>

@if (!UserSession.IsLoggedIn)
{
    <MudCard Class="ma-4 pa-4 text-center" Elevation="4">
        <MudCardContent>
            <MudText Typo="Typo.h6" Class="mb-4">Você não está logado</MudText>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="/login">
                Fazer Login
            </MudButton>
        </MudCardContent>
    </MudCard>
}
else if (isloading)
{
    <div class="d-flex justify-center mt-10">
        <MudProgressCircular Indeterminate="true" Size="Size.Large" Color="Color.Primary" />
    </div>
}
else
{
    @* RESUMO *@
    if (MostrarResumo)
    {
        <MudCard Class="ma-4 pa-4">
            <MudCardContent>
                <MudText Typo="Typo.h6" Class="mb-3">Resumo</MudText>

                @foreach (var resposta in Resposta)
                {
                    <MudText Class="mb-1">  
                        @(resposta != -1 ? "Resposta Salva" : "Não está respondido")
                    </MudText>
                }

                <div class="d-flex justify-center gap-2 mt-4">
                    <MudButton Variant="Variant.Outlined" OnClick="QuestaoVoltar">Voltar</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="QuestaoProximo">Terminar</MudButton>
                </div>
            </MudCardContent>
        </MudCard>
    }
    @* RESULTADOS *@
    else if (MostrarRespostas)
    {
        <MudCard Class="ma-4 pa-4">
            <MudCardContent>
                <MudText Typo="Typo.h6" Class="mb-3">Resultados</MudText>
                <MudText Class="mb-2">Quantidade certa: <b>@QuantidadeCerta</b></MudText>

                @foreach (var certo in RespostaFinal)
                {
                    <MudText>Questão: @(certo ? "✅ Correta" : "❌ Errada")</MudText>
                }
            </MudCardContent>
        </MudCard>
    }
    @* QUESTÕES *@
    else
    {
        <MudCard Class="ma-4 pa-4">
            <MudCardContent>
                <MudText Typo="Typo.h6" Class="mb-2">Questão @(posicao + 1)</MudText>
                <MudText Class="mb-4" Typo="Typo.h5">@questoes[posicao].EnunciadoQuestao</MudText>

                <br />
                <MudGrid>
                    <MudRadioGroup T="int"
                                    @bind-Value="@currentSelection"
                                    SelectedOption="-1"
                                    Class="d-block mb-4">
                        <MudItem xs="12" >
                            <MudRadio T="int" Value="1" Class="mb-2">@questoes[posicao].RespostaCertaQuestao</MudRadio>
                        </MudItem>
                        <MudItem xs="12" >
                            <MudRadio T="int" Value="2" Class="mb-2">@questoes[posicao].RespostaErrada1Questao</MudRadio>
                        </MudItem>
                        <MudItem xs="12">
                            <MudRadio T="int" Value="3" Class="mb-2">@questoes[posicao].RespostaErrada2Questao</MudRadio>
                        </MudItem>
                        <MudItem xs="12">
                            <MudRadio T="int" Value="4" Class="mb-2">@questoes[posicao].RespostaErrada3Questao</MudRadio>
                        </MudItem>

                        
                     </MudRadioGroup>
                </MudGrid>
                
                <div class="d-flex justify-center gap-2">
                    <MudButton Variant="Variant.Outlined" OnClick="QuestaoVoltar" Disabled="@(posicao == 0)">
                        Voltar
                    </MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="QuestaoProximo">
                        @((posicao < questoes.Count - 1) ? "Avançar" : "Terminar")
                    </MudButton>
                </div>
            </MudCardContent>
        </MudCard>
    }
}

@code
{
    [Parameter] public int idAtividade { get; set; }

    public AtividadeResponse? atividade = new(0,"",null,null);
    public MateriaResponse materia;
    public List<QuestaoResponse> questoes = new();
    public List<int> Resposta = new();
    public List<bool> RespostaFinal = new();
    public int posicao = 0;
    public bool isloading = true;
    public string erro = "";
    public bool MostrarResumo = false;
    public bool MostrarRespostas = false;
    public int currentSelection = -1;
    public int QuantidadeCerta = 0;

    // Obrigatorio para usar o UserSession
    protected override async Task OnInitializedAsync()
    {
        UserSession.OnChange += HandleUserSessionChanged;

        await CarregarAtividade();

        await InvokeAsync(StateHasChanged); // Ensure re-render
    }

    public async Task CarregarAtividade()
    {
        try
        {
            var atividadeAPI = await AtividadesAPI.GetAtividadeByIdAsync(idAtividade);
            if (atividadeAPI == null)
            {
                return;
            }
            atividade = atividadeAPI;

            foreach (var questaoid in atividadeAPI.TbQuestoesIdQuestaos)
            {

                var questao = await QuestoesAPI.GetQuestaoByIdAsync(questaoid);
                if (questao != null)
                    questoes.Add(questao);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao carregar atividade: {ex.Message}");
        }

        Resposta = Enumerable.Repeat(-1, questoes.Count).ToList();
        currentSelection = Resposta.Any() ? Resposta[0] : -1; // Initialize currentSelection for the first question
        RespostaFinal = Enumerable.Repeat(false, questoes.Count).ToList();
        isloading = false;
        await InvokeAsync(StateHasChanged); // Ensure re-render
    }

    public void VerificarResposta()
    {
        QuantidadeCerta = 0;
        for (int i = 0; i < Resposta.Count; i++)
        {
            if (i < RespostaFinal.Count)
            {
                if (Resposta[i] == 1)
                {
                    QuantidadeCerta++;
                    RespostaFinal[i] = true;
                }
                else
                {
                    RespostaFinal[i] = false;
                }
            }
            else
            {
                Console.WriteLine($"Warning: RespostaFinal size mismatch at index {i}. Expected size: {Resposta.Count}, Actual size: {RespostaFinal.Count}");
            }
        }

        string respostas = "";

        for (int i = 0; i < questoes.Count; i++)
        {
            respostas += $"({questoes[i].IdQuestao}, {questoes[i].TemaQuestao.ToString()}, {RespostaFinal[i]})";
        }

        Console.WriteLine($"ID: {atividade.IdAtividade}, Aluno({UserSession.CurrentUser.IdAluno}) ,Respostas({respostas})");
    }

    public void QuestaoProximo()
    {
        if (MostrarResumo)
        {
            VerificarResposta();
            MostrarRespostas = true;
            MostrarResumo = false;
        }
        else
        {
            Resposta[posicao] = currentSelection;

            if (posicao < questoes.Count - 1)
            {
                posicao++;
                currentSelection = -1;
            }
            else
            {
                posicao = 0;
                MostrarResumo = true;
            }
        }
    }

    public void QuestaoVoltar()
    {
        if (MostrarResumo)
        {
            MostrarRespostas = false;
            MostrarResumo = false;
        }
        else
        {
            Resposta[posicao] = currentSelection;
            posicao--;
            if (Resposta[posicao] != -1) currentSelection = Resposta[posicao];
            else currentSelection = -1;

        }
    }

    // para o usersession
    private void HandleUserSessionChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        UserSession.OnChange -= HandleUserSessionChanged;
    }
}
