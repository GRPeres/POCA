@page "/editar-materia/{id:int}"
@using POCA.Web.Services.APIs
@using POCA.API.Responses
@inject MateriasAPI MateriasAPI
@inject ProfessoresAPI ProfessoresAPI
@inject AlunosAPI AlunosAPI
@inject AtividadesAPI AtividadesAPI
@inject NavigationManager NavManager
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.Large" Class="py-6">
    <MudPaper Elevation="4" Class="pa-6 rounded-lg">
        <MudText Typo="Typo.h4" Class="mb-4">Editar Matéria</MudText>

        <MudStepper @bind-ActiveStep="_currentStep" Elevation="0" Linear="true" HideNavigation="true">
            <MudStep Label="Nome da Matéria" Completed="_currentStep > 0">
                <MudStepContent>
                    <MudForm @ref="_formStep1" @bind-IsValid="_isValidStep1">
                        <MudTextField @bind-Value="_nomeMateriaInput"
                                      Label="Nome da Matéria *"
                                      Required="true"
                                      RequiredError="O nome é obrigatório"
                                      Variant="Variant.Outlined"
                                      FullWidth="true" />
                    </MudForm>
                </MudStepContent>
            </MudStep>

            <MudStep Label="Selecionar Professores" Completed="_currentStep > 1">
                <MudStepContent>
                    <MudTextField @bind-Value="_searchProfessor" Placeholder="Pesquisar professores..." Variant="Variant.Outlined" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" Class="mb-2" FullWidth="true" />

                    <MudTable Items="@FilteredProfessores" Hover="true" Bordered="true" Dense="true">
                        <HeaderContent>
                            <MudTh>Selecionar</MudTh>
                            <MudTh>Nome</MudTh>
                        </HeaderContent>
                        <RowTemplate Context="professor">
                            <MudTd>
                                <MudCheckBox T="bool" @bind-Value="IsSelectedProfessor[professor.IdProfessor]" />
                            </MudTd>
                            <MudTd>@professor.NomeProfessor</MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudStepContent>
            </MudStep>

            <MudStep Label="Selecionar Alunos" Completed="_currentStep > 2">
                <MudStepContent>
                    <MudTextField @bind-Value="_searchAluno" Placeholder="Pesquisar alunos..." Variant="Variant.Outlined" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" Class="mb-2" FullWidth="true" />

                    <MudTable Items="@FilteredAlunos" Hover="true" Bordered="true" Dense="true">
                        <HeaderContent>
                            <MudTh>Selecionar</MudTh>
                            <MudTh>Nome</MudTh>
                        </HeaderContent>
                        <RowTemplate Context="aluno">
                            <MudTd>
                                <MudCheckBox T="bool" @bind-Value="IsSelectedAluno[aluno.IdAluno]" />
                            </MudTd>
                            <MudTd>@aluno.NomeAluno</MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudStepContent>
            </MudStep>

            <MudStep Label="Selecionar Atividades" Completed="_currentStep > 3">
                <MudStepContent>
                    <MudTextField @bind-Value="_searchAtividade" Placeholder="Pesquisar atividades..." Variant="Variant.Outlined" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" Class="mb-2" FullWidth="true" />

                    <MudTable Items="@FilteredAtividades" Hover="true" Bordered="true" Dense="true">
                        <HeaderContent>
                            <MudTh>Selecionar</MudTh>
                            <MudTh>Nome</MudTh>
                        </HeaderContent>
                        <RowTemplate Context="atividade">
                            <MudTd>
                                <MudCheckBox T="bool" @bind-Value="IsSelectedAtividade[atividade.IdAtividade]" />
                            </MudTd>
                            <MudTd>@atividade.NomeAtividade</MudTd>
                        </RowTemplate>
                    </MudTable>

                    <div class="d-flex justify-space-between mt-4">
                        <MudButton Color="Color.Success" Disabled="@_isSubmitting" OnClick="HandleSubmit">
                            @(_isSubmitting ? "Salvando..." : "Salvar Matéria")
                        </MudButton>
                    </div>
                </MudStepContent>
            </MudStep>
        </MudStepper>
    </MudPaper>
</MudContainer>

@code {
    [Parameter] public int id { get; set; }

    private int _currentStep = 0;
    private bool _isValidStep1 = false;
    private bool _isSubmitting = false;

    private MudForm _formStep1;
    private string _nomeMateriaInput = "";

    private ICollection<ProfessorResponse> _professores = new List<ProfessorResponse>();
    private ICollection<AlunoResponse> _alunos = new List<AlunoResponse>();
    private ICollection<AtividadeResponse> _atividades = new List<AtividadeResponse>();

    private Dictionary<int, bool> IsSelectedProfessor = new();
    private Dictionary<int, bool> IsSelectedAluno = new();
    private Dictionary<int, bool> IsSelectedAtividade = new();

    private string _searchProfessor = "";
    private string _searchAluno = "";
    private string _searchAtividade = "";

    protected override async Task OnInitializedAsync()
    {
        _professores = await ProfessoresAPI.GetProfessoresAsync() ?? new List<ProfessorResponse>();
        _alunos = await AlunosAPI.GetAlunosAsync() ?? new List<AlunoResponse>();
        _atividades = await AtividadesAPI.GetAtividadesAsync() ?? new List<AtividadeResponse>();

        var materia = await MateriasAPI.GetMateriaAsync(id);
        if (materia is null)
        {
            Snackbar.Add("Matéria não encontrada.", Severity.Error);
            NavManager.NavigateTo("/materias");
            return;
        }

        _nomeMateriaInput = materia.NomeMateria;

        // Init selection dictionaries with all false
        IsSelectedProfessor = _professores.ToDictionary(p => p.IdProfessor, _ => false);
        IsSelectedAluno = _alunos.ToDictionary(a => a.IdAluno, _ => false);
        IsSelectedAtividade = _atividades.ToDictionary(a => a.IdAtividade, _ => false);

        // Mark the already selected ones as true
        if (materia.tbProfessoresIdProfessors is not null)
            foreach (var pid in materia.tbProfessoresIdProfessors)
                if (IsSelectedProfessor.ContainsKey(pid))
                    IsSelectedProfessor[pid] = true;

        if (materia.tbAlunosIdAlunos is not null)
            foreach (var aid in materia.tbAlunosIdAlunos)
                if (IsSelectedAluno.ContainsKey(aid))
                    IsSelectedAluno[aid] = true;

        if (materia.tbAtividadesIdAtividades is not null)
            foreach (var atid in materia.tbAtividadesIdAtividades)
                if (IsSelectedAtividade.ContainsKey(atid))
                    IsSelectedAtividade[atid] = true;
    }

    private IEnumerable<ProfessorResponse> FilteredProfessores =>
        _professores.Where(p => string.IsNullOrWhiteSpace(_searchProfessor) || p.NomeProfessor.Contains(_searchProfessor, StringComparison.OrdinalIgnoreCase));

    private IEnumerable<AlunoResponse> FilteredAlunos =>
        _alunos.Where(a => string.IsNullOrWhiteSpace(_searchAluno) || a.NomeAluno.Contains(_searchAluno, StringComparison.OrdinalIgnoreCase));

    private IEnumerable<AtividadeResponse> FilteredAtividades =>
        _atividades.Where(a => string.IsNullOrWhiteSpace(_searchAtividade) || a.NomeAtividade.Contains(_searchAtividade, StringComparison.OrdinalIgnoreCase));

    private async Task GoToStep2()
    {
        await _formStep1.Validate();
        if (_isValidStep1)
            _currentStep = 1;
    }

    private void GoToStep3() => _currentStep = 2;
    private void GoToStep4() => _currentStep = 3;
    private void BackToStep1() => _currentStep = 0;
    private void BackToStep2() => _currentStep = 1;
    private void BackToStep3() => _currentStep = 2;

    private async Task HandleSubmit()
    {
        _isSubmitting = true;

        try
        {
            // Update Materia name
            var materiaUpdateRequest = new MateriaEditRequest(
                id,
                _nomeMateriaInput
            );

            var updatedMateria = await MateriasAPI.UpdateMateriaAsync(materiaUpdateRequest);
            if (updatedMateria == null)
            {
                Snackbar.Add("Erro ao atualizar matéria.", Severity.Error);
                return;
            }

            // Load current associations (if your API supports getting full related IDs)
            var currentMateria = await MateriasAPI.GetMateriaAsync(id);
            if (currentMateria == null)
            {
                Snackbar.Add("Erro ao obter matéria atualizada.", Severity.Error);
                return;
            }

            // Update Professores associations
            await UpdateAssociations(
                id,
                currentMateria.tbProfessoresIdProfessors ?? Enumerable.Empty<int>(),
                IsSelectedProfessor.Where(kvp => kvp.Value).Select(kvp => kvp.Key),
                MateriasAPI.AddProfessorToMateriaAsync,
                MateriasAPI.RemoveProfessorFromMateriaAsync);

            // Update Alunos associations
            await UpdateAssociations(
                id,
                currentMateria.tbAlunosIdAlunos ?? Enumerable.Empty<int>(),
                IsSelectedAluno.Where(kvp => kvp.Value).Select(kvp => kvp.Key),
                MateriasAPI.AddAlunoToMateriaAsync,
                MateriasAPI.RemoveAlunoFromMateriaAsync);

            // Update Atividades associations
            await UpdateAssociations(
                id,
                currentMateria.tbAtividadesIdAtividades ?? Enumerable.Empty<int>(),
                IsSelectedAtividade.Where(kvp => kvp.Value).Select(kvp => kvp.Key),
                MateriasAPI.AddAtividadeToMateriaAsync,
                MateriasAPI.RemoveAtividadeFromMateriaAsync);

            Snackbar.Add("Matéria atualizada com sucesso!", Severity.Success);
            NavManager.NavigateTo("/materias");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isSubmitting = false;
        }
    }

    private async Task UpdateAssociations(
        int materiaId,
        IEnumerable<int> currentIds,
        IEnumerable<int> selectedIds,
        Func<int, int, Task<bool>> addFunc,
        Func<int, int, Task<bool>> removeFunc)
    {
        var toAdd = selectedIds.Except(currentIds);
        var toRemove = currentIds.Except(selectedIds);

        foreach (var idToRemove in toRemove)
        {
            await removeFunc(materiaId, idToRemove);
        }

        foreach (var idToAdd in toAdd)
        {
            await addFunc(materiaId, idToAdd);
        }
    }
}
