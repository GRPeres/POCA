@page "/"
@inject UserSessionService UserSession
@inject NavigationManager NavigationManager
@inject Services.APIs.AlunosAPI AlunosAPI;

<PageTitle>Home</PageTitle>

@if (UserSession.IsLoggedIn)
{
    @if (UserSession.CurrentUser.IsProfessor)
    {
        <MudText>Você já está logado como professor</MudText>
    }
    else
    {
        <MudNavMenu>
            <MudText>Quadro de Avisos</MudText>
            <MudButton OnClick="AvisoVoltar">Voltar</MudButton>
            <MudButton OnClick="AvisoProximo">Proximo</MudButton>
        </MudNavMenu>

        <MudText>@Avisos[posicao]</MudText>


        if (_isLoanding)
        {
            <MudProgressCircular Indeterminate="true" size="Size.Small" Color="Color.Inherit"></MudProgressCircular>        
        }else
        {
            @foreach (var materia in TodasMaterias)
            {
                <MudText>@materia</MudText>
            }
        }
    }
}
else
{
    <MudText>Você já não está logado</MudText>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mt-4" Href="/login">Logar</MudButton>
}

@code
{
    public List<string> Avisos = new() { "Aviso 1", "Aviso 2", "Aviso 3", "Aviso 4" };
    public int posicao;
    public int Progresso;
    public bool _isLoanding = true;

    public List<MateriaResponse> TodasMaterias = new();

    protected override async void OnInitialized()
    {
        UserSession.OnChange += HandleUserSessionChanged;
        posicao = 0;

        await getMaterias();

    }

    private void HandleUserSessionChanged()
    {
        InvokeAsync(StateHasChanged);
    }   

    public void Dispose()
    {
        UserSession.OnChange -= HandleUserSessionChanged;
    }

    // Começo
    public void AvisoProximo()
    {
        if (posicao < Avisos.Count - 1)
        {
            posicao++;
        }else
        {
            posicao = 0;
        }
    }

    public void AvisoVoltar()
    {
        if (posicao > 0)
        {
            posicao--;
        }
        else
        {
            posicao = Avisos.Count - 1;
        }
    }

    public async Task getMaterias()
    {
        _isLoanding = true;
        var aluno = await AlunosAPI.GetMateriasByAlunoAsync((int)UserSession.CurrentUser.IdAluno!);


        if(aluno != null)
        {
            foreach (var materia in aluno)
            {
                TodasMaterias.Add(materia);
            }
        }
        
        _isLoanding = false;
    }
}