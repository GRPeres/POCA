@page "/perfil"
@using MudBlazor
@using POCA.Web
@inject PessoasAPI PessoasAPI
@inject POCA.Web.Services.APIs.AlunosAPI AlunosAPI
@inject POCA.Web.Services.APIs.ProfessoresAPI ProfessoresAPI
@inject UserSessionService UserSession
@inject NavigationManager NavigationManager

@if (paginicial)
{
    @if (UserSession.CurrentUser.IsProfessor)
    {
        <MudText>Nome: @Professor.NomeProfessor</MudText>
        <MudText>Contato: @Professor.ContatoProfessor</MudText>
    }
    else
    {
        <MudText>Nome: @Aluno.NomeAluno</MudText>
        <MudText>Contato: @Aluno.ContatoAluno</MudText>
        <MudText>Idade: @Aluno.IdadeAluno</MudText>
    }
}else
{
    <MudProgressCircular Indeterminate="true" size="Size.Small" Color="Color.Inherit"></MudProgressCircular>
}

@code
{
    public string Erro = "";

    public ProfessorResponse Professor = new ProfessorResponse(0, "", "", "");
    public AlunoResponse Aluno = new AlunoResponse(0,"",0,0,"",null,null);
    public bool paginicial = false;

    // Obrigatorio para usar o UserSession
    protected async override void OnInitialized()
    {
        UserSession.OnChange += HandleUserSessionChanged;

        await GetCurrentUser();
        paginicial = true;
    }

    private void HandleUserSessionChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        UserSession.OnChange -= HandleUserSessionChanged;
    }

    // Começa aqui


    private async Task GetCurrentUser()
    {
        try
        {
            if (UserSession.IsLoggedIn && UserSession.CurrentUser.IsProfessor)
            {
                int id = (int)UserSession.CurrentUser.IdProfessor!;
                Professor = await ProfessoresAPI.GetProfessorbyidAsync(id);
                paginicial = true;
            }
        else if (UserSession.IsLoggedIn && !UserSession.CurrentUser.IsProfessor)
            {
                int id = (int)UserSession.CurrentUser.IdAluno!;
                Aluno = await AlunosAPI.GetAlunosbyIDAsync(id);
                paginicial = true;
            }
        }
        catch (Exception ex)
        {
            Erro = $"Error: {ex.Message}";
        }

        StateHasChanged();
    }
        
    private string FormatJsonResponse(object obj)
    {
        return JsonSerializer.Serialize(obj, new JsonSerializerOptions
        {
            WriteIndented = true
        });
    }
}
