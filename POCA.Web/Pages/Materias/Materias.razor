@page "/materias"
@using POCA.Web.Services.APIs
@inject MateriaAPI MateriaAPI
@inject ISnackbar Snackbar
@inject NavigationManager Navigation

<MudContainer MaxWidth="MaxWidth.Large" Class="py-4">
    <!-- Page Header with Action Button -->
    <div class="d-flex align-center justify-space-between mb-6">
        <MudText Typo="Typo.h4" Class="mb-0">Lista de Matérias</MudText>
        <MudButton Color="Color.Primary"
                   Variant="Variant.Filled"
                   StartIcon="@Icons.Material.Filled.Add"
                   Href="/adicionar-materia"
                   Size="Size.Small">
            Nova Matéria
        </MudButton>
    </div>

    <!-- Search and Filter Bar -->
    <MudPaper Class="pa-4 mb-4" Elevation="1">
        <div class="d-flex align-center">
            <MudTextField @bind-Value="_searchString"
                          Placeholder="Pesquisar matérias..."
                          Variant="Variant.Outlined"
                          AdornmentIcon="@Icons.Material.Filled.Search"
                          Adornment="Adornment.Start"
                          Immediate="true"
                          Class="mr-4"
                          Style="flex-grow: 1;" />

            <MudTooltip Text="Limpar filtros">
                <MudIconButton Icon="@Icons.Material.Filled.Clear"
                               Color="Color.Primary"
                               OnClick="ClearFilters"
                               Class="ml-1" />
            </MudTooltip>
        </div>
    </MudPaper>

    <!-- Materias Table -->
    <MudPaper Elevation="2" Class="overflow-hidden">
        <MudTable Items="@FilteredMaterias"
                  Dense="true"
                  Hover="true"
                  Striped="false"
                  Bordered="true"
                  Loading="@_isLoading">
            <ToolBarContent>
                <MudText Typo="Typo.body2" Class="ml-2">
                    Total: @FilteredMaterias.Count() matérias
                </MudText>
                <MudSpacer />
                <MudButton Variant="Variant.Text"
                           Color="Color.Primary"
                           Size="Size.Small"
                           StartIcon="@Icons.Material.Filled.Refresh"
                           OnClick="RefreshData">
                    Atualizar
                </MudButton>
            </ToolBarContent>

            <HeaderContent>
                <MudTh>ID</MudTh>
                <MudTh>Nome</MudTh>
                <MudTh>Alunos</MudTh>
                <MudTh>Atividades</MudTh>
                <MudTh>Professores</MudTh>
                <MudTh Style="width: 160px;">Ações</MudTh>
            </HeaderContent>

            <RowTemplate Context="materia">
                <MudTd>@materia.IdMateria</MudTd>
                <MudTd>@materia.NomeMateria</MudTd>
                <MudTd>@materia.TotalAlunos</MudTd>
                <MudTd>@materia.TotalAtividades</MudTd>
                <MudTd>@materia.TotalProfessores</MudTd>
                <MudTd>
                    <div class="d-flex">
                        <MudTooltip Text="Visualizar">
                            <MudIconButton Icon="@Icons.Material.Filled.Visibility"
                                           Color="Color.Primary"
                                           Size="Size.Small"
                                           Href="@($"/materia/{materia.IdMateria}")" />
                        </MudTooltip>

                        <MudTooltip Text="Editar">
                            <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                           Color="Color.Secondary"
                                           Size="Size.Small"
                                           Href="@($"/editar-materia/{materia.IdMateria}")"
                                           Class="ml-2" />
                        </MudTooltip>

                        <MudTooltip Text="Excluir">
                            <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                           Color="Color.Error"
                                           Size="Size.Small"
                                           OnClick="@(() => OpenDeleteDialog(materia.IdMateria))"
                                           Class="ml-2" />
                        </MudTooltip>
                    </div>
                </MudTd>
            </RowTemplate>

            <PagerContent>
                <MudTablePager PageSizeOptions="@(new[] {10, 25, 50})" />
            </PagerContent>
        </MudTable>
    </MudPaper>
</MudContainer>

<!-- Delete Confirmation Dialog -->
<MudDialog @ref="deleteDialog" MaxWidth="MaxWidth.ExtraSmall">
    <TitleContent>
        <MudText Typo="Typo.h6">Confirmar Exclusão</MudText>
    </TitleContent>
    <DialogContent>
        <MudText>Deseja realmente excluir esta matéria?</MudText>
        <MudText Typo="Typo.body2" Color="Color.Error">Esta ação não pode ser desfeita.</MudText>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Text" OnClick="() => deleteDialog.CloseAsync()">Cancelar</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="ConfirmDelete">Excluir</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private List<MateriaResponse> _materias = new();
    private bool _isLoading = true;
    private string _searchString = "";
    private MudDialog deleteDialog;
    private int _materiaToDeleteId;

    protected override async Task OnInitializedAsync()
    {
        await LoadMaterias();
    }

    private async Task LoadMaterias()
    {
        _isLoading = true;
        try
        {
            var response = await MateriaAPI.GetMateriasAsync();
            // _materias = response?.ToList() ?? new();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao carregar matérias: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private async Task RefreshData()
    {
        await LoadMaterias();
    }

    private IEnumerable<MateriaResponse> FilteredMaterias => _materias
        .Where(m => string.IsNullOrWhiteSpace(_searchString) ||
                    (m.NomeMateria?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false))
        .ToList();

    private void ClearFilters()
    {
        _searchString = "";
    }

    private void OpenDeleteDialog(int materiaId)
    {
        _materiaToDeleteId = materiaId;
        deleteDialog.ShowAsync();
    }

    private async Task ConfirmDelete()
    {
        try
        {
            await MateriaAPI.DeleteMateriaAsync(_materiaToDeleteId);
            Snackbar.Add("Matéria excluída com sucesso!", Severity.Success);
            await LoadMaterias(); // Refresh the list after deletion
            await deleteDialog.CloseAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao excluir matéria: {ex.Message}", Severity.Error);
            await deleteDialog.CloseAsync();
        }
    }

    public class MateriaResponse
    {
        public int IdMateria { get; set; }
        public string? NomeMateria { get; set; }
        public int TotalAlunos { get; set; }
        public int TotalAtividades { get; set; }
        public int TotalProfessores { get; set; }
    }
}