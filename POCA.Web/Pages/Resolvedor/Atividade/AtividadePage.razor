@page "/atividadepage/{idAtividade:int}"
@using MudBlazor
@inject UserSessionService UserSession
@inject NavigationManager NavigationManager
@inject POCA.Web.Services.APIs.AtividadesAPI AtividadesAPI
@inject POCA.Web.Services.APIs.MateriasAPI MateriasAPI
@inject POCA.Web.Services.APIs.QuestoesAPI QuestoesAPI
@inject POCA.Web.Services.APIs.AlunosAPI AlunosAPI

<MudContainer MaxWidth="MaxWidth.Medium" Class="py-6">
    <MudPaper Class="pa-6" Elevation="3">
        <MudText Typo="Typo.h4" Class="mb-4">Atividade</MudText>

        <MudText Color="Color.Error">@erro</MudText>

        @if (!UserSession.IsLoggedIn)
        {
            <MudStack Class="pa-4 text-center" Elevation="1">
                <MudText Typo="Typo.h6" Class="mb-3">Você não está logado</MudText>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="/login">Fazer Login</MudButton>
            </MudStack>
        }
        else if (isloading)
        {
            <div class="d-flex justify-center my-10">
                <MudProgressCircular Indeterminate="true" Size="Size.Large" Color="Color.Primary" />
            </div>
        }
        else
        {
            @if (MostrarResumo)
            {
                <MudStack Class="pa-4 mb-4" Elevation="2">
                    <MudText Typo="Typo.h6" Class="mb-2">Resumo das Respostas</MudText>

                    @foreach (var resposta in Resposta)
                    {
                        <MudText>Resposta: @(resposta != -1 ? "Marcado" : "Não marcado")</MudText>
                    }

                    <MudStack Direction="Row" Spacing="2" Class="mt-4">
                        <MudButton Variant="Variant.Outlined" OnClick="QuestaoVoltar">Voltar</MudButton>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="QuestaoProximo">Terminar</MudButton>
                    </MudStack>
                </MudStack>
            }

            else if (MostrarRespostas)
            {
                <MudStack Class="pa-4 mb-4" Elevation="2">
                    <MudText Typo="Typo.h6" Class="mb-2">Resultado Final</MudText>
                    <MudText Class="mb-2">Quantidade de acertos: @QuantidadeCerta</MudText>

                    @foreach (var certo in RespostaFinal)
                    {
                        <MudText>Questão: @(certo ? "✅ Correta" : "❌ Errada")</MudText>
                    }
                </MudStack>
            }
            else
            {
                <MudStack Class="pa-4 ma-2">
                    <MudText Typo="Typo.subtitle1" Class="mb-4">Questão @(posicao + 1)</MudText>

                    <MudText Typo="Typo.body1" Class="mb-4">@questoes[posicao].EnunciadoQuestao</MudText>

                    <MudRadioGroup T="int"
                                   @bind-Value="@currentSelection"
                                   SelectedOption="-1"
                                   Label="Escolha uma opção"
                                   Class="mb-4">
                        <MudItem xs="12">
                            @foreach (var option in ShuffledOptions)
                            {
                                <MudRadio T="int" Value="@option.Value">@option.Text</MudRadio>
                            }
                        </MudItem>
                        
                    </MudRadioGroup>

                    <MudStack class="justify-space-between mx-8" Row="true">
                        <MudButton Variant="Variant.Outlined"
                                   Disabled="@(posicao == 0)"
                                   OnClick="QuestaoVoltar">
                            Voltar
                        </MudButton>

                        <MudButton Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   OnClick="QuestaoProximo">
                            @((posicao < questoes.Count - 1) ? "Avançar" : "Terminar")
                        </MudButton>
                    </MudStack>
                </MudStack>
            }
        }
    </MudPaper>
</MudContainer>

@code {
    [Parameter] public int idAtividade { get; set; }

    public AtividadeResponse? atividade = new(0, "", null, null);
    public MateriaResponse materia;
    public List<QuestaoResponse> questoes = new();
    public List<int> Resposta = new();
    public List<bool> RespostaFinal = new();
    public int posicao = 0;
    public bool isloading = true;
    public string erro = "";
    public bool MostrarResumo = false;
    public bool MostrarRespostas = false;
    public int currentSelection = -1;
    public int QuantidadeCerta = 0;

    // Class for holding option data
    public class OptionItem
    {
        public int Value { get; set; }
        public string Text { get; set; } = "";
        public bool IsCorrect { get; set; }
    }

    private List<OptionItem> ShuffledOptions = new();

    protected override async Task OnInitializedAsync()
    {
        UserSession.OnChange += HandleUserSessionChanged;

        await CarregarAtividade();

        ShuffleCurrentQuestionOptions();

        await InvokeAsync(StateHasChanged); // Ensure re-render
    }

    public async Task CarregarAtividade()
    {
        try
        {
            var atividadeAPI = await AtividadesAPI.GetAtividadeByIdAsync(idAtividade);
            if (atividadeAPI == null)
                return;

            atividade = atividadeAPI;

            foreach (var questaoid in atividadeAPI.TbQuestoesIdQuestaos)
            {
                var questao = await QuestoesAPI.GetQuestaoByIdAsync(questaoid);
                if (questao != null)
                    questoes.Add(questao);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao carregar atividade: {ex.Message}");
            erro = "Erro ao carregar atividade.";
        }

        Resposta = Enumerable.Repeat(-1, questoes.Count).ToList();
        RespostaFinal = Enumerable.Repeat(false, questoes.Count).ToList();
        currentSelection = Resposta.Any() ? Resposta[0] : -1;
        isloading = false;
    }

    private void ShuffleCurrentQuestionOptions()
    {
        if (questoes.Count == 0 || posicao < 0 || posicao >= questoes.Count)
        {
            ShuffledOptions = new List<OptionItem>();
            return;
        }

        var options = new List<OptionItem>
        {
            new OptionItem { Value = 1, Text = questoes[posicao].RespostaCertaQuestao, IsCorrect = true },
            new OptionItem { Value = 2, Text = questoes[posicao].RespostaErrada1Questao, IsCorrect = false },
            new OptionItem { Value = 3, Text = questoes[posicao].RespostaErrada2Questao, IsCorrect = false },
            new OptionItem { Value = 4, Text = questoes[posicao].RespostaErrada3Questao, IsCorrect = false },
        };

        var rng = new Random();
        ShuffledOptions = options.OrderBy(x => rng.Next()).ToList();
    }

    public void VerificarResposta()
    {
        QuantidadeCerta = 0;

        for (int i = 0; i < Resposta.Count; i++)
        {
            if (i >= RespostaFinal.Count) continue;

            // Determine correctness by matching selected Value with correct option
            var correctOption = new List<string>
            {
                questoes[i].RespostaCertaQuestao,
                questoes[i].RespostaErrada1Questao,
                questoes[i].RespostaErrada2Questao,
                questoes[i].RespostaErrada3Questao
            };

            // Note: Because options are shuffled, you should store selected answer text, or map properly.
            // Here, we'll just check if selected Value == 1 (original correct)
            if (Resposta[i] == 1)
            {
                QuantidadeCerta++;
                RespostaFinal[i] = true;
            }
            else
            {
                RespostaFinal[i] = false;
            }
        }
    }

    public void QuestaoProximo()
    {
        if (MostrarResumo)
        {
            VerificarResposta();
            MostrarRespostas = true;
            MostrarResumo = false;
        }
        else
        {
            Resposta[posicao] = currentSelection;

            if (posicao < questoes.Count - 1)
            {
                posicao++;
            }
            else
            {
                posicao = 0;
                MostrarResumo = true;
            }

            currentSelection = Resposta[posicao];
            ShuffleCurrentQuestionOptions();
        }
    }

    public void QuestaoVoltar()
    {
        if (MostrarResumo)
        {
            MostrarRespostas = false;
            MostrarResumo = false;
        }
        else
        {
            Resposta[posicao] = currentSelection;

            posicao--;

            currentSelection = Resposta[posicao];

            ShuffleCurrentQuestionOptions();
        }
    }

    private void HandleUserSessionChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        UserSession.OnChange -= HandleUserSessionChanged;
    }
}
